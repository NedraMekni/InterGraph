"""
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/MarcMoesser/Protein-Ligand-Interaction-Graphs/blob/main/PLIG_tutorial/Generate%20PLIGs.ipynb
"""
import os.path
import pandas as pd
import os
import pickle
from tqdm import tqdm
from rdkit import Chem


# import functions from PLIG utilities script
from InterGraph.PLIG_utils import *

# load in data PDB files

raw_data = "data"

list_of_pdbcodes = [i for i in os.listdir(raw_data)]
print(list_of_pdbcodes)

# load in all atom types for the 20 proteinogenic amino acids
Atom_Keys = pd.read_csv("../persistent_data/PDB_Atom_Keys.csv", sep=",")

# FOR PLIG
mol_graphs_crystal_8A = {}
mol_graphs_crystal_7A = {}
mol_graphs_crystal_6A = {}
mol_graphs_crystal_5A = {}
mol_graphs_crystal_4A = {}

# Generate interaction fingerprint graph from PDB and mol2 file
for pdb in tqdm(list_of_pdbcodes):

    lig_path = os.path.join(raw_data, pdb, f"{pdb[-3:]}.mol2")
    protein_path = os.path.join(raw_data, pdb, f"{pdb}.pdb")

    # load the ligand and handle invalid mol2 file
    try:

        c_mol = Chem.AddHs(
            Chem.MolFromMol2File(
                lig_path, sanitize=False, removeHs=True, cleanupSubstructures=True
            ),
            addCoords=True,
        )
        print("Mol from Mol2 conversion succeded  ", lig_path)
    except:
        print("Mol from Mol2 conversion failed ", lig_path)
        continue

    # 8 Angstrom
    contacts_8A = GetAtomContacts(protein_path, c_mol, Atom_Keys, distance_cutoff=8.0)
    graph_c_8 = mol_to_graph(c_mol, contacts_8A, Atom_Keys)
    mol_graphs_crystal_8A[pdb] = graph_c_8

    # 7 Angstrom
    contacts_7A = GetAtomContacts(protein_path, c_mol, Atom_Keys, distance_cutoff=7.0)
    graph_c_7 = mol_to_graph(c_mol, contacts_7A, Atom_Keys)
    mol_graphs_crystal_7A[pdb] = graph_c_7

    # 6 Angstrom
    contacts_6A = GetAtomContacts(protein_path, c_mol, Atom_Keys, distance_cutoff=6.0)
    graph_c_6 = mol_to_graph(c_mol, contacts_6A, Atom_Keys)
    mol_graphs_crystal_6A[pdb] = graph_c_6

    # 5 Angstrom
    contacts_5A = GetAtomContacts(protein_path, c_mol, Atom_Keys, distance_cutoff=5.0)
    graph_c_5 = mol_to_graph(c_mol, contacts_5A, Atom_Keys)
    mol_graphs_crystal_5A[pdb] = graph_c_5

    # 4 Angstrom
    contacts_4A = GetAtomContacts(protein_path, c_mol, Atom_Keys, distance_cutoff=4.0)
    graph_c_4 = mol_to_graph(c_mol, contacts_4A, Atom_Keys)
    mol_graphs_crystal_4A[pdb] = graph_c_4

    # ---------------------------------------------------------------------------------------------

# save the graphs to use as input for the GNN models

output_file_graphs = os.path.join("../data/IFG_output/", "PLIG_test_run_8A.pickle")
with open(output_file_graphs, "wb") as handle:
    pickle.dump(mol_graphs_crystal_8A, handle, protocol=pickle.HIGHEST_PROTOCOL)

output_file_graphs = os.path.join("../data/IFG_output/", "PLIG_test_run_7A_std.pickle")
with open(output_file_graphs, "wb") as handle:
    pickle.dump(mol_graphs_crystal_7A, handle, protocol=pickle.HIGHEST_PROTOCOL)

output_file_graphs = os.path.join("../data/IFG_output/", "PLIG_test_run_6A_std.pickle")
with open(output_file_graphs, "wb") as handle:
    pickle.dump(mol_graphs_crystal_6A, handle, protocol=pickle.HIGHEST_PROTOCOL)

output_file_graphs = os.path.join("../data/IFG_output/", "PLIG_test_run_5A_std.pickle")
with open(output_file_graphs, "wb") as handle:
    pickle.dump(mol_graphs_crystal_5A, handle, protocol=pickle.HIGHEST_PROTOCOL)

output_file_graphs = os.path.join("../data/IFG_output/", "PLIG_test_run_4A_std.pickle")
with open(output_file_graphs, "wb") as handle:
    pickle.dump(mol_graphs_crystal_4A, handle, protocol=pickle.HIGHEST_PROTOCOL)
